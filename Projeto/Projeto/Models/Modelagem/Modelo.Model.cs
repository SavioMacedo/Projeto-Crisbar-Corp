//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 28/11/2017 13:42:19
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.ComponentModel;
using System.Reflection;
using System.Data.Common;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;
using Entidade;

namespace Persistencia
{

    public partial class Model : DbContext
    {

        public Model() :
            base()
        {
            OnCreated();
        }

        public Model(DbContextOptions<Model> options) :
            base(options)
        {
            OnCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.Options.Extensions.OfType<RelationalOptionsExtension>().Any(ext => !string.IsNullOrEmpty(ext.ConnectionString) || ext.Connection != null))
            CustomizeConfiguration(ref optionsBuilder);
            base.OnConfiguring(optionsBuilder);
        }

        partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

        public virtual DbSet<Funcionario> Funcionarios
        {
            get;
            set;
        }

        public virtual DbSet<Cargo> Cargos
        {
            get;
            set;
        }

        public virtual DbSet<Produto> Produtos
        {
            get;
            set;
        }

        public virtual DbSet<Estoque> Estoques
        {
            get;
            set;
        }

        public virtual DbSet<Medida> Medidas
        {
            get;
            set;
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            this.FuncionarioMapping(modelBuilder);
            this.CustomizeFuncionarioMapping(modelBuilder);

            this.CargoMapping(modelBuilder);
            this.CustomizeCargoMapping(modelBuilder);

            this.ProdutoMapping(modelBuilder);
            this.CustomizeProdutoMapping(modelBuilder);

            this.EstoqueMapping(modelBuilder);
            this.CustomizeEstoqueMapping(modelBuilder);

            this.MedidaMapping(modelBuilder);
            this.CustomizeMedidaMapping(modelBuilder);

            RelationshipsMapping(modelBuilder);
            CustomizeMapping(ref modelBuilder);
        }
    
        #region Funcionario Mapping

        private void FuncionarioMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Funcionario>().ToTable(@"Funcionario");
            modelBuilder.Entity<Funcionario>().Property<long>(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Funcionario>().Property<string>(x => x.Nome).HasColumnName(@"Nome").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Funcionario>().Property<System.DateTime>(x => x.DataAdmissao).HasColumnName(@"DataAdmissao").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Funcionario>().Property<long>(x => x.CargoId).HasColumnName(@"CargoId").ValueGeneratedNever();
            modelBuilder.Entity<Funcionario>().HasKey(@"Id");
        }
	
        partial void CustomizeFuncionarioMapping(ModelBuilder modelBuilder);

        #endregion
    
        #region Cargo Mapping

        private void CargoMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Cargo>().ToTable(@"Cargo");
            modelBuilder.Entity<Cargo>().Property<long>(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Cargo>().Property<string>(x => x.Descricao).HasColumnName(@"Descricao").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Cargo>().Property<short>(x => x.NivelPrivilegio).HasColumnName(@"NivelPrivilegio").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Cargo>().HasKey(@"Id");
        }
	
        partial void CustomizeCargoMapping(ModelBuilder modelBuilder);

        #endregion
    
        #region Produto Mapping

        private void ProdutoMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Produto>().ToTable(@"Produto");
            modelBuilder.Entity<Produto>().Property<long>(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Produto>().Property<string>(x => x.Descricao).HasColumnName(@"Descricao").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Produto>().Property<double>(x => x.Preco).HasColumnName(@"Preco").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Produto>().Property<long>(x => x.EstoqueId).HasColumnName(@"EstoqueId").ValueGeneratedNever();
            modelBuilder.Entity<Produto>().HasKey(@"Id");
        }
	
        partial void CustomizeProdutoMapping(ModelBuilder modelBuilder);

        #endregion
    
        #region Estoque Mapping

        private void EstoqueMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Estoque>().ToTable(@"Estoque");
            modelBuilder.Entity<Estoque>().Property<long>(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Estoque>().Property<long>(x => x.Quantidade).HasColumnName(@"Quantidade").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Estoque>().Property<long>(x => x.MedidaId).HasColumnName(@"MedidaId").ValueGeneratedNever();
            modelBuilder.Entity<Estoque>().HasKey(@"Id");
        }
	
        partial void CustomizeEstoqueMapping(ModelBuilder modelBuilder);

        #endregion
    
        #region Medida Mapping

        private void MedidaMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Medida>().ToTable(@"Medida");
            modelBuilder.Entity<Medida>().Property<long>(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Medida>().Property<string>(x => x.Nome).HasColumnName(@"Nome").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Medida>().HasKey(@"Id");
        }
	
        partial void CustomizeMedidaMapping(ModelBuilder modelBuilder);

        #endregion

        private void RelationshipsMapping(ModelBuilder modelBuilder)
        {

        #region Funcionario Navigation properties

            modelBuilder.Entity<Funcionario>().HasOne(x => x.Cargo).WithMany(op => op.Funcionarios).IsRequired(true).HasForeignKey(@"CargoId");

        #endregion

        #region Cargo Navigation properties

            modelBuilder.Entity<Cargo>().HasMany(x => x.Funcionarios).WithOne(op => op.Cargo).IsRequired(true).HasForeignKey(@"CargoId");

        #endregion

        #region Produto Navigation properties

            modelBuilder.Entity<Produto>().HasOne(x => x.Estoque).WithMany(op => op.Produtos).IsRequired(true).HasForeignKey(@"EstoqueId");

        #endregion

        #region Estoque Navigation properties

            modelBuilder.Entity<Estoque>().HasMany(x => x.Produtos).WithOne(op => op.Estoque).IsRequired(true).HasForeignKey(@"EstoqueId");
            modelBuilder.Entity<Estoque>().HasOne(x => x.Medida).WithMany(op => op.Estoques).IsRequired(true).HasForeignKey(@"MedidaId");

        #endregion

        #region Medida Navigation properties

            modelBuilder.Entity<Medida>().HasMany(x => x.Estoques).WithOne(op => op.Medida).IsRequired(true).HasForeignKey(@"MedidaId");

        #endregion
        }

        partial void CustomizeMapping(ref ModelBuilder modelBuilder);

        public bool HasChanges()
        {
            return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
        }

        partial void OnCreated();
    }
}
